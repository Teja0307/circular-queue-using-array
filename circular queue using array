#include<iostream>
using namespace std;
#define MAX 4
int queue_arr[MAX];
int front=-1;
int rear=-1;


int isfull(){
    if((rear+1)%MAX == front)
      return 1;
    else
      return 0;
}

int isempty(){
    if(rear==-1 && front==-1)
      return 1;
    else
     return 0;
}


void Enqueue(int val){
    if(isfull())
    {
        cout<<"Queue is full";
        exit(1);
    }
    else if(isempty())
    {
        front=0;
        rear=0;
        queue_arr[rear]=val;
    }
    else
    {
        rear=(rear+1)%MAX;
        queue_arr[rear]=val;
    }
}

int Dequeue(){
    int x;
    if(isempty())
    {
        cout<<"queue is empty";
        exit(1);
    }
    else if(rear==front)
    {
        x=queue_arr[front];
        front=-1;
        rear=-1;
        return x;
    }
    else
    {
        x=queue_arr[front];
        queue_arr[front]=0;
        front++;
        return x;
    }
}

void count(){
    cout<<(rear-front+1);
}

void print(){
    int i;
    for(i=0;i<=rear;i++)
    {
        cout<<queue_arr[i]<<" ";
    }
}

int main()
{
    int data,choice;
     for(int i=0;i<MAX;i++)
        {
            queue_arr[i]=0;
        }
     for(int i=0;i<MAX;i++)
        {
            cout<<queue_arr[i]<<" ";
        }
    while(1)
    {
        cout<<"\n";
        cout<<"1.enqueue\n";
        cout<<"2.dequeue\n";
        cout<<"3.display\n";
        cout<<"4.count\n";
        cout<<"5.Quit\n";
        cout<<"Enter your choice:";
        cin>>choice;
        switch(choice){
            case 1:
              cout<<"element to be enqueued is:";
              cin>>data;
              Enqueue(data);
              break;
            case 2:
              data=Dequeue();
              cout<<"element dequeued is:"<<data;
              break;
            case 3:
              cout<<"Elements in the queue are:";
              print();
              break;
            case 4:
              cout<<"Total elements in the queue are:";
              count();
              break;
            case 5:
              exit(1);
            default:
              cout<<"NO choice";
              
        }
    }
}
